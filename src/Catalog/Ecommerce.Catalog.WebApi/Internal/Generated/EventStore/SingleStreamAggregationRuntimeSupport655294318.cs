// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamAggregationLiveAggregation655294318
    public class SingleStreamAggregationLiveAggregation655294318 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Ecommerce.Catalog.Products.Product>
    {
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<Ecommerce.Catalog.Products.Product> _singleStreamAggregation;

        public SingleStreamAggregationLiveAggregation655294318(Marten.Events.Aggregation.SingleStreamAggregation<Ecommerce.Catalog.Products.Product> singleStreamAggregation)
        {
            _singleStreamAggregation = singleStreamAggregation;
        }


        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductDrafted> Lambda1 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.BrandEstablished> Lambda2 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.TagsListed> Lambda3 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductConfirmed> Lambda4 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductCancelled> Lambda5 {get; set;}


        public override Ecommerce.Catalog.Products.Product Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Ecommerce.Catalog.Products.Product snapshot)
        {
            if (!events.Any()) return null;
            Ecommerce.Catalog.Products.Product product = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Ecommerce.Catalog.Products.Product Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductDrafted> event_ProductDrafted1:
                    return new Ecommerce.Catalog.Products.Product(event_ProductDrafted1.Data);
                    break;
            }

            return new Ecommerce.Catalog.Products.Product();
        }


        public Ecommerce.Catalog.Products.Product Apply(Marten.Events.IEvent @event, Ecommerce.Catalog.Products.Product aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductDrafted> event_ProductDrafted2:
                    Lambda1.Invoke(aggregate, event_ProductDrafted2.Data);
                    break;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.BrandEstablished> event_BrandEstablished3:
                    Lambda2.Invoke(aggregate, event_BrandEstablished3.Data);
                    break;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.TagsListed> event_TagsListed4:
                    Lambda3.Invoke(aggregate, event_TagsListed4.Data);
                    break;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductConfirmed> event_ProductConfirmed5:
                    Lambda4.Invoke(aggregate, event_ProductConfirmed5.Data);
                    break;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductCancelled> event_ProductCancelled6:
                    Lambda5.Invoke(aggregate, event_ProductCancelled6.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamAggregationLiveAggregation655294318
    
    
    // START: SingleStreamAggregationInlineHandler655294318
    public class SingleStreamAggregationInlineHandler655294318 : Marten.Events.Aggregation.AggregationRuntime<Ecommerce.Catalog.Products.Product, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Ecommerce.Catalog.Products.Product, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Ecommerce.Catalog.Products.Product, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<Ecommerce.Catalog.Products.Product> _singleStreamAggregation;

        public SingleStreamAggregationInlineHandler655294318(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Ecommerce.Catalog.Products.Product, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Ecommerce.Catalog.Products.Product, System.Guid> storage, Marten.Events.Aggregation.SingleStreamAggregation<Ecommerce.Catalog.Products.Product> singleStreamAggregation) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamAggregation = singleStreamAggregation;
        }


        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductDrafted> Lambda1 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.BrandEstablished> Lambda2 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.TagsListed> Lambda3 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductConfirmed> Lambda4 {get; set;}

        public System.Action<Ecommerce.Catalog.Products.Product, Ecommerce.Catalog.Products.ProductCancelled> Lambda5 {get; set;}


        public override async System.Threading.Tasks.ValueTask<Ecommerce.Catalog.Products.Product> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Ecommerce.Catalog.Products.Product, System.Guid> slice, Marten.Events.IEvent evt, Ecommerce.Catalog.Products.Product aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductCancelled> event_ProductCancelled12:
                    aggregate ??= new Ecommerce.Catalog.Products.Product();
                    Lambda5.Invoke(aggregate, event_ProductCancelled12.Data);
                    return aggregate;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductDrafted> event_ProductDrafted8:
                    aggregate ??= new Ecommerce.Catalog.Products.Product(event_ProductDrafted8.Data);
                    Lambda1.Invoke(aggregate, event_ProductDrafted8.Data);
                    return aggregate;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.BrandEstablished> event_BrandEstablished9:
                    aggregate ??= new Ecommerce.Catalog.Products.Product();
                    Lambda2.Invoke(aggregate, event_BrandEstablished9.Data);
                    return aggregate;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.TagsListed> event_TagsListed10:
                    aggregate ??= new Ecommerce.Catalog.Products.Product();
                    Lambda3.Invoke(aggregate, event_TagsListed10.Data);
                    return aggregate;
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductConfirmed> event_ProductConfirmed11:
                    aggregate ??= new Ecommerce.Catalog.Products.Product();
                    Lambda4.Invoke(aggregate, event_ProductConfirmed11.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Ecommerce.Catalog.Products.Product Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Ecommerce.Catalog.Products.ProductDrafted> event_ProductDrafted7:
                    return new Ecommerce.Catalog.Products.Product(event_ProductDrafted7.Data);
                    break;
            }

            return new Ecommerce.Catalog.Products.Product();
        }

    }

    // END: SingleStreamAggregationInlineHandler655294318
    
    
}

